# Maximum and minimum number of peers to connect to per torrent.
min_peers = 40
max_peers = 100

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 10
max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
max_uploads = 6

max_downloads_global = 6
#max_open_files = 20

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 100
upload_rate = 512

log.open_file = "rtorrent", ~/.rtorrent/logs/rtorrent.log

log.add_output = "debug", "rtorrent"

# Default directory to save the downloaded torrents.
# directory = <default_download_directory>

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = ~/.session/

# Watch a directory for new torrents, and stop those that have been
# deleted.

#### START ARCH WIKI DOWNLOAD SORTING #####
## Taken from https://wiki.archlinux.org/index.php/RTorrent#Manage_completed_files ##

## schedule template
# schedule = watch_directory_1,5,5,"load_start=<torrent_watch_dir>/*.torrent,d.set_custom1=<save_path>,d.delete_tied="
# insert schedules here VVV
schedule = untied_directory,5,5,stop_untied=
schedule = tied_directory,5,5,start_tied=

schedule = bind_collapse,0,0,"ui.bind_key=download_list,*,view.collapsed.toggle="

# insert a method with the alias 'checkdirs1'
# 1) returns true if the current path of the torrent data is not equal to the value of custom1
# 2) otherwise, returns false
method.insert = checkdirs1,simple,"not=\"$equal={d.get_custom1=,d.get_base_path=}\""

# insert a method with the alias 'movecheck1'
# 1) returns true if all 3 commands return true ('result of checkdirs1' && 'torrent is 100% done', 'custom1 variable is set')
# 2) otherwise, returns false
method.insert=movecheck1,simple,"and={checkdirs1=,d.get_complete=,d.get_custom1=}"

# insert a method with the alias 'movedir1'
# (a series of commands, separated by ';') 
# 1) "set path of torrent to equal the value of custom1";
# 2) "mv -u <current data path> <custom1 path>";
# 3) "clear custom1", "stop the torrent","resume the torrent"
# 4) stop the torrent
# 5) start the torrent (to get the torrent to update the 'base path')
method.insert=movedir1,simple,"d.set_directory=$d.get_custom1=;execute=mv,-u,$d.get_base_path=,$d.get_custom1=;d.set_custom1=;d.stop=;d.start="

# set a key with the name 'move_hashed1' that is triggered by the hash_done event.
# 1) When hashing of a torrent completes, this custom key will be triggered.
# 2) when triggered, execute the 'movecheck1' method and check the return value.
# 3) if the 'movecheck' method returns 'true', execute the 'movedir1' method we inserted above.
# NOTE-0: *Only* data that has had their hash checked manually with ^R [^R = Control r].
# Or on a rtorrent restart[which initiates a hash check]. Will the data move; ~/torrents/incomplete => ~/torrents/complete for example.
# NOTE-1: 'branch' is an 'if' conditional statement: if(movecheck1){movedir1}
method.set_key=event.download.finished,move_complete,"branch={$movecheck1=,movedir1=}"

#### END ARCH WIKI DOWNLOAD SORTING ####
# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=500M

# Port range to use for listening.
port_range = 49942-49942

# Start opening ports at a random position within the port range.
port_random = yes

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = yes

# Set whether the client should try to connect to UDP trackers.
use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
encryption = allow_incoming,try_outgoing,enable_retry

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
# 
dht = auto

# UDP port to use for DHT. 
# 
dht_port = 64351

# Enable peer exchange (for torrents not marked private)
#
peer_exchange = yes

scgi_port = 127.0.0.1:5000
encoding_list = UTF-8
system.file_allocate.set = yes
pieces.sync.always_safe = yes

method.insert = pyro.extended, value|const, 1
method.insert = pyro.bin_dir, string|const, 
method.insert = pyro.rc_dialect, string|const|simple, "execute_capture=bash,-c,\"test $1 = 0.8.6 && echo -n 0.8.6 || echo -n 0.8.9\",dialect,$system.client_version="
method.insert = pyro.rtorrent_rc, string|const|private, "$cat=~/.pyroscope/rtorrent-,\"$pyro.rc_dialect=\",.rc.default"
import = $pyro.rtorrent_rc=
